<?php

/**
 * Implementation of hook_services_resources().
 */
function ah_dirt_services_resources() {
  $api = array(
    'item' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves posted items',
          'callback' => '_ah_dirt_item_retrieve',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => array('path' => '0'),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'nitems',
              'type' => 'int',
              'description' => 'Number of latest items to get',
              'source' => array('param' => 'nitems'),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'since',
              'type' => 'int',
              'description' => 'Posts from the last number of days',
              'source' => array('param' => 'since'),
              'optional' => TRUE,
              'default' => '0',
            ),
          ),
        ),
      ),
    ),
  );

  return $api;
}

/**
 * Callback function for item retrieve
 */
function _ah_dirt_item_retrieve($fn, $nitems, $timestamp) {
  // Sanitize inputs.
  $nitems = intval($nitems);
  $timestamp = intval($timestamp);

  return
      ah_dirt_find_item_items($nitems, $timestamp);
}

/**
 * Gets item posts
 */
function ah_dirt_find_item_items($nitems, $timestamp) {
  // Compose query
  $query = db_select('node', 'n');
  $query->join('node_revision', 'v', '(n.nid = v.nid) AND (n.vid = v.vid)');
  $query->join('users', 'u', 'n.uid = u.uid');
  $query->join('field_revision_field_webpage', 'w', '(n.nid = w.entity_id) AND (n.vid = w.revision_id)');
  $query->join('field_data_body', 'b', '((b.entity_type = \'node\') AND (b.entity_id = n.nid) AND (b.revision_id = n.vid))');
  $query->join('field_revision_field_license', 'fl', '(n.nid = fl.entity_id) AND (n.vid = fl.revision_id)');
  $query->join('taxonomy_term_data', 'tt', '(n.nid = fl.entity_id) AND (n.vid = fl.revision_id) AND (tt.tid = fl.field_license_tid)');
  $query->fields('v', array('timestamp', 'title'));
  $query->addField('u', 'name', 'author');
  $query->addField('b', 'body_value', 'description');
  $query->addField('w', 'field_webpage_url', 'website');
  $query->addField('tt', 'name', 'license');
  $query->condition('n.type', 'item', '=');
  // How many days ago?
  if ($timestamp) {
    $query->condition('v.timestamp', time() - ($timestamp * 60 * 60 * 24), '>');
  }
  $query->orderBy('v.timestamp', 'DESC');
  // Limited by items?
  if ($nitems) {
    $query->range(0, $nitems);
  }
  $items = $query->execute()->fetchAll();

  return $items;
}

//http://localhost/DIRT/item_endpoint/content/retrieve?nitems=5&since=10 - gets all from my module
//http://localhost/DIRT/item_endpoint/content/retrieve?nitems=5&since=10&api-key=cabbage
//http://localhost/DIRT/dirt_path/user/login?api-key=dirt_key
//http://localhost/DIRT/dirt_path/dirt_alias/retrieve?api-key=dirt_key

function endpoint_test() {
  global $base_url;
  $url = "$base_url/dirt_path";
  $data = array(
    'username' => 'RestUser',
    'password' => 'anypass',
    'api-key' => 'dirt_key'
  );
  $data = http_build_query($data, '', '&');
  $options = array(
    'headers' => array(
      'Accept' => 'application/json',
    ),
    'method' => 'POST',
    'data' => $data
  );
  $response = drupal_http_request($url . '/user/login', $options);
  dsm($response);
  $data = json_decode($response->data);
// Check if login was successful
  if ($response->code == 200) {
    // Now recycle the login cookie we recieved in the first request
    $options['headers']['Cookie'] = $data->session_name . '=' . $data->sessid;
    // Get info about a user
    $data = array();
    $options['data'] = http_build_query($data, '', '&');
    $options['method'] = 'GET';
    $response = drupal_http_request($base_url . '/user/32', $options);
  }
}